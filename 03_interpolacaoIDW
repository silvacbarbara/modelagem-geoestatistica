# Carregar bibliotecas
library(sf)        # Manipulação de shapefiles
library(gstat)     # Variograma e krigagem
library(raster)    # Rasterização dos dados
library(sp)        # Manipulação espacial
library(dplyr)     # Manipulação de dados
library(ggplot2)   # Visualização
library(lubridate) # Manipulação de datas
library(geoR)      # Para análise geoestatística detalhada


# ------------------------------------------------------------------
# 0. ABRIR OS DADOS DE FOCOS DE CALOR
# ------------------------------------------------------------------

# Ler shapefile dos focos de calor
focos <- st_read("./focos_qmd_inpe_2020-09-01_2020-09-30_04.shp")
focos <- st_transform(focos, crs = 31983)

# Adicionar contagem de focos por dia
focos$Data <- as.Date(focos$Data)
focos_dia <- focos %>%
  group_by(Data) %>%
  summarise(total_focos = n(), dias_sem_chuva = max(DiaSemChuv, na.rm = TRUE))

print(focos_dia)

# Associar contagem de focos a tabela original
focos$contagem <- focos_dia$total_focos[match(focos$Data, focos_dia$Data)]
focos$dias_sem_chuva <- focos_dia$dias_sem_chuva[match(focos$Data, focos_dia$Data)]

# Converter para SpatialPointsDataFrame
focos_sp <- as(focos, "Spatial")

# ------------------------------------------------------------------
# 5. INTERPOLAÇÃO COM IDW
# ------------------------------------------------------------------
tocantins <- sf::read_sf("./SIGLA_UF_TO.shp")
tocantins <- sf::st_transform(tocantins, crs = 31983)

# Interpolação determinística usando o inverso da distância como peso da influência das observações vizinhas.
grid <- sp::spsample(x = sf::as_Spatial(focos_dia), n = 50000, type = 'regular')
grid <- sp::SpatialPixels(grid)
sp::proj4string(grid) <- sp::proj4string(sf::as_Spatial(focos_dia))

modelo_idw <- gstat::gstat(
  id = 'total_focos',
  formula = total_focos ~ 1, 
  data = focos_dia, 
  nmax = 8, 
  set = list(idp = 0.5))

mapa_idw <- predict(modelo_idw, grid)
sp::gridded(mapa_idw) <- TRUE
mapa_idw <- raster::raster(mapa_idw)

raster::plot(
  mapa_idw,
  col = viridis::turbo(100),
  main = "Contagem de Focos por Dia",
  xlab = "Longitude",
  ylab = "Latitude",
  cex.axis = 0.7,
  xlim = c(min(st_bbox(tocantins)["xmin"]), max(st_bbox(tocantins)["xmax"])),
  ylim = c(min(st_bbox(tocantins)["ymin"]), max(st_bbox(tocantins)["ymax"]))
)

plot(tocantins, col = "transparent", add = TRUE)
